package com.galileo.netbeans.module;

import com.galileo.netbeans.myentities.Album;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.Serializable;
import java.util.Vector;
import java.util.logging.Logger;
import javax.swing.table.AbstractTableModel;
import org.openide.DialogDisplayer;
import org.openide.NotifyDescriptor;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;

final class AlbumsTopComponent extends TopComponent {

   private static AlbumsTopComponent instance;
   private static final String PREFERRED_ID = "AlbumsTopComponent";

   private AlbumTableModel model = new AlbumTableModel();

   private AlbumsTopComponent() {
      initComponents();
      setName(NbBundle.getMessage(AlbumsTopComponent.class, "CTL_AlbumsTopComponent"));
      setToolTipText(NbBundle.getMessage(AlbumsTopComponent.class, "HINT_AlbumsTopComponent"));

      albums.setModel(model);
      albums.addMouseListener(new MouseAdapter() {

         @Override
         public void mouseClicked(MouseEvent event) {
            if (event.getClickCount() == 2) {
               editAlbumActionPerformed(null);
            }
         }
      });
   }

   @Override
   public void componentOpened() {
      model.getData().clear();
      model.getData().addAll(DataModel.getAlbums());
      model.fireTableDataChanged();
   }

   private static final class AlbumTableModel extends AbstractTableModel {

      private String[] columns = {"Title", "Tracks", "CDs", "Year"};
      private Vector<Album> data = new Vector<Album>();

      public Album getRow(int row) {
         return data.get(row);
      }

      public int getRowCount() {
         return data.size();
      }

      public int getColumnCount() {
         return columns.length;
      }

      @Override
      public String getColumnName(int col) {
         return columns[col];
      }

      public Object getValueAt(int row, int col) {
         Album album = data.get(row);

         switch (col) {
            case 0:
               return album.getTitle();
            case 1:
               return album.getTracks();
            case 2:
               return album.getCds();
            case 3:
               return album.getYear();
         }
         return "";
      }

      public Vector<Album> getData() {
         return data;
      }
   }

   /** This method is called from within the constructor to
    * initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is
    * always regenerated by the Form Editor.
    */
   // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
   private void initComponents() {

      scrollPane = new javax.swing.JScrollPane();
      albums = new javax.swing.JTable();
      editAlbum = new javax.swing.JButton();
      newAlbum = new javax.swing.JButton();
      deleteAlbum = new javax.swing.JButton();

      albums.setAutoCreateRowSorter(true);
      scrollPane.setViewportView(albums);

      org.openide.awt.Mnemonics.setLocalizedText(editAlbum, "Edit...");
      editAlbum.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            editAlbumActionPerformed(evt);
         }
      });

      org.openide.awt.Mnemonics.setLocalizedText(newAlbum, "New...");
      newAlbum.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            newAlbumActionPerformed(evt);
         }
      });

      org.openide.awt.Mnemonics.setLocalizedText(deleteAlbum, "Delete");
      deleteAlbum.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            deleteAlbumActionPerformed(evt);
         }
      });

      org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
      this.setLayout(layout);
      layout.setHorizontalGroup(
         layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
         .add(layout.createSequentialGroup()
            .addContainerGap()
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
               .add(org.jdesktop.layout.GroupLayout.LEADING, scrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 348, Short.MAX_VALUE)
               .add(layout.createSequentialGroup()
                  .add(deleteAlbum)
                  .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 151, Short.MAX_VALUE)
                  .add(newAlbum)
                  .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                  .add(editAlbum)))
            .addContainerGap())
      );
      layout.setVerticalGroup(
         layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
         .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
            .addContainerGap()
            .add(scrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 229, Short.MAX_VALUE)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
               .add(editAlbum)
               .add(newAlbum)
               .add(deleteAlbum))
            .addContainerGap())
      );
   }// </editor-fold>//GEN-END:initComponents

private void deleteAlbumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteAlbumActionPerformed
   if(albums.getSelectedRowCount() > 0) {
      Album album = model.getRow(albums.getSelectedRow());
      NotifyDescriptor d = new NotifyDescriptor.Confirmation(
         "Are you sure you want delete the album " + album.getTitle(), 
         "Confirm Album Deletion");
      if(DialogDisplayer.getDefault().notify(d) == NotifyDescriptor.YES_OPTION) {
         DataModel.deleteAlbum(album);
         model.getData().remove(album);
         model.fireTableDataChanged();
      }
   }
}//GEN-LAST:event_deleteAlbumActionPerformed

private void editAlbumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editAlbumActionPerformed
   if(albums.getSelectedRowCount() > 0) {
      Album album = AlbumEditDialog.editAlbum(model.getRow(albums.getSelectedRow()));
      if(album != null) {
         DataModel.updateAlbum(album);
         model.fireTableDataChanged();
      }
   }
}//GEN-LAST:event_editAlbumActionPerformed

private void newAlbumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newAlbumActionPerformed
   Album album = AlbumEditDialog.newAlbum();
   if(album != null) {
      DataModel.insertAlbum(album);
      model.getData().add(album);
      model.fireTableDataChanged();
   }
}//GEN-LAST:event_newAlbumActionPerformed
    
    
   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JTable albums;
   private javax.swing.JButton deleteAlbum;
   private javax.swing.JButton editAlbum;
   private javax.swing.JButton newAlbum;
   private javax.swing.JScrollPane scrollPane;
   // End of variables declaration//GEN-END:variables
    
    /**
     * Gets default instance. Do not use directly: reserved for *.settings files only,
     * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
     * To obtain the singleton instance, use {@link findInstance}.
     */
    public static synchronized AlbumsTopComponent getDefault() {
       if (instance == null) {
          instance = new AlbumsTopComponent();
       }
       return instance;
    }
    
    /**
     * Obtain the PlaylistTopComponent instance. Never call {@link #getDefault} directly!
     */
    public static synchronized AlbumsTopComponent findInstance() {
       TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
       if (win == null) {
          Logger.getLogger(AlbumsTopComponent.class.getName()).warning(
                  "Cannot find MyWindow component. It will not be located properly in the window system.");
          return getDefault();
       }
       if (win instanceof AlbumsTopComponent) {
          return (AlbumsTopComponent)win;
       }
       Logger.getLogger(AlbumsTopComponent.class.getName()).warning(
               "There seem to be multiple components with the '" + PREFERRED_ID +
               "' ID. That is a potential source of errors and unexpected behavior.");
       return getDefault();
    }
    
    @Override
   public int getPersistenceType() {
      return TopComponent.PERSISTENCE_ALWAYS;
   }

   @Override
   public Object writeReplace() {
      return new ResolvableHelper();
   }

   @Override
   protected String preferredID() {
      return PREFERRED_ID;
   }

   final static class ResolvableHelper implements Serializable {
      private static final long serialVersionUID = 1L;
      public Object readResolve() {
         return AlbumsTopComponent.getDefault();
      }
   }
}
