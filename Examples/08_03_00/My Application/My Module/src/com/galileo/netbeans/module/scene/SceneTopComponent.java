package com.galileo.netbeans.module.scene;

import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.io.Serializable;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.netbeans.api.visual.action.ActionFactory;
import org.netbeans.api.visual.action.WidgetAction;
import org.netbeans.api.visual.widget.ImageWidget;
import org.netbeans.api.visual.widget.LayerWidget;
import org.netbeans.api.visual.widget.Scene;
import org.openide.util.ImageUtilities;
import org.openide.util.NbBundle;
import org.openide.util.lookup.Lookups;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;

final class SceneTopComponent extends TopComponent {

   private static SceneTopComponent instance;

   private static final String PREFERRED_ID = "SceneTopComponent";

   private Scene sc = new Scene();

   private SceneTopComponent() {
      initComponents();
      setName(NbBundle.getMessage(SceneTopComponent.class, "CTL_SceneTopComponent"));
      setToolTipText(NbBundle.getMessage(SceneTopComponent.class, "HINT_SceneTopComponent"));

      scenePane.setViewportView(sc.createView());
      LayerWidget layer1 = new LayerWidget(sc);
      sc.addChild(layer1);

      ImageWidget w1 = new ImageWidget(sc, ImageUtilities.loadImage("com/galileo/netbeans/module/node.gif"));
      layer1.addChild(w1);

      ImageWidget w2 = new ImageWidget(sc, ImageUtilities.loadImage("com/galileo/netbeans/module/node.gif"));
      layer1.addChild(w2);

      LayerWidget layer2 = new LayerWidget(sc);
      sc.addChild(layer2);

      ImageWidget w3 = new ImageWidget(sc, ImageUtilities.loadImage("com/galileo/netbeans/module/node2.gif"));
      layer2.addChild(w3);

      WidgetAction ma = ActionFactory.createMoveAction();
      w1.getActions().addAction(ma);
      w2.getActions().addAction(ma);
      w3.getActions().addAction(ma);
      
      associateLookup(Lookups.singleton(sc.createSatelliteView()));
   }
   
   /** This method is called from within the constructor to
    * initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is
    * always regenerated by the Form Editor.
    */
   // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
   private void initComponents() {

      scenePane = new javax.swing.JScrollPane();
      save = new javax.swing.JButton();

      org.openide.awt.Mnemonics.setLocalizedText(save, "Save...");
      save.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            saveActionPerformed(evt);
         }
      });

      org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
      this.setLayout(layout);
      layout.setHorizontalGroup(
         layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
         .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
            .addContainerGap()
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
               .add(org.jdesktop.layout.GroupLayout.LEADING, scenePane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
               .add(save))
            .addContainerGap())
      );
      layout.setVerticalGroup(
         layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
         .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
            .addContainerGap()
            .add(scenePane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 244, Short.MAX_VALUE)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
            .add(save)
            .addContainerGap())
      );
   }// </editor-fold>//GEN-END:initComponents
   
private void saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveActionPerformed
   BufferedImage img = new BufferedImage(sc.getView().getWidth(), sc.getView().getHeight(), BufferedImage.TYPE_4BYTE_ABGR);
   Graphics2D graphics = img.createGraphics();
   sc.paint(graphics);
   graphics.dispose();

   JFileChooser chooser = new JFileChooser();
   chooser.setFileFilter(new FileNameExtensionFilter("Portable Network Graphics (.png)", "png"));
   if(chooser.showSaveDialog(sc.getView()) == JFileChooser.APPROVE_OPTION) {
      File file = chooser.getSelectedFile();
      if (! file.getName().toLowerCase().endsWith(".png"))
         file = new File(file.getParentFile(), file.getName() + ".png");
      
      try {
         ImageIO.write(img, "png", file);
      } catch (IOException e) {
         Logger.getLogger(getName()).warning(e.toString());
      }
   }
}//GEN-LAST:event_saveActionPerformed


   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JButton save;
   private javax.swing.JScrollPane scenePane;
   // End of variables declaration//GEN-END:variables
   
   /**
    * Gets default instance. Do not use directly: reserved for *.settings files only,
    * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
    * To obtain the singleton instance, use {@link findInstance}.
    */
   public static synchronized SceneTopComponent getDefault() {
      if (instance == null) {
         instance = new SceneTopComponent();
      }
      return instance;
   }
   
   /**
    * Obtain the SceneTopComponent instance. Never call {@link #getDefault} directly!
    */
   public static synchronized SceneTopComponent findInstance() {
      TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
      if (win == null) {
         Logger.getLogger(SceneTopComponent.class.getName()).warning(
                 "Cannot find " + PREFERRED_ID + " component. It will not be located properly in the window system.");
         return getDefault();
      }
      if (win instanceof SceneTopComponent) {
         return (SceneTopComponent)win;
      }
      Logger.getLogger(SceneTopComponent.class.getName()).warning(
              "There seem to be multiple components with the '" + PREFERRED_ID +
              "' ID. That is a potential source of errors and unexpected behavior.");
      return getDefault();
   }
   
   @Override
   public int getPersistenceType() {
      return TopComponent.PERSISTENCE_ALWAYS;
   }
   
   /** replaces this in object stream */
   @Override
   public Object writeReplace() {
      return new ResolvableHelper();
   }
   
   @Override
   protected String preferredID() {
      return PREFERRED_ID;
   }
   
   final static class ResolvableHelper implements Serializable {
      private static final long serialVersionUID = 1L;
      public Object readResolve() {
         return SceneTopComponent.getDefault();
      }
   }
}
