package com.galileo.netbeans.module.scene;

import java.awt.BorderLayout;
import java.io.Serializable;
import java.util.logging.Logger;
import javax.swing.JComponent;
import org.openide.util.Lookup;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
import org.openide.util.NbBundle;
import org.openide.util.Utilities;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;

final class OverviewTopComponent extends TopComponent implements LookupListener {

   private static OverviewTopComponent instance;
   private static final String PREFERRED_ID = "OverviewTopComponent";
   private Lookup.Result<JComponent> result = null;

   private OverviewTopComponent() {
      initComponents();
      setName(NbBundle.getMessage(OverviewTopComponent.class, "CTL_OverviewTopComponent"));
      setToolTipText(NbBundle.getMessage(OverviewTopComponent.class, "HINT_OverviewTopComponent"));

      result = Utilities.actionsGlobalContext().lookupResult(JComponent.class);
      result.addLookupListener(this);
   }

   public void resultChanged(LookupEvent event) {
      if (result.allInstances().iterator().hasNext()) {
         removeAll();
         add(result.allInstances().iterator().next(), BorderLayout.CENTER);
         doLayout();
      }
   }

   @Override
   public void componentOpened() {
      resultChanged(null);
   }

   /** This method is called from within the constructor to
    * initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is
    * always regenerated by the Form Editor.
    */
   // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
   private void initComponents() {

      setLayout(new java.awt.BorderLayout());
   }// </editor-fold>//GEN-END:initComponents

   // Variables declaration - do not modify//GEN-BEGIN:variables
   // End of variables declaration//GEN-END:variables
   /**
    * Gets default instance. Do not use directly: reserved for *.settings files only,
    * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
    * To obtain the singleton instance, use {@link findInstance}.
    */
   public static synchronized OverviewTopComponent getDefault() {
      if (instance == null) {
         instance = new OverviewTopComponent();
      }
      return instance;
   }

   /**
    * Obtain the OverviewTopComponent instance. Never call {@link #getDefault} directly!
    */
   public static synchronized OverviewTopComponent findInstance() {
      TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
      if (win == null) {
         Logger.getLogger(OverviewTopComponent.class.getName()).warning("Cannot find " + PREFERRED_ID + " component. It will not be located properly in the window system.");
         return getDefault();
      }
      if (win instanceof OverviewTopComponent) {
         return (OverviewTopComponent) win;
      }
      Logger.getLogger(OverviewTopComponent.class.getName()).warning("There seem to be multiple components with the '" + PREFERRED_ID + "' ID. That is a potential source of errors and unexpected behavior.");
      return getDefault();
   }

   @Override
   public int getPersistenceType() {
      return TopComponent.PERSISTENCE_ALWAYS;
   }

   /** replaces this in object stream */
   @Override
   public Object writeReplace() {
      return new ResolvableHelper();
   }

   @Override
   protected String preferredID() {
      return PREFERRED_ID;
   }

   static final class ResolvableHelper implements Serializable {

      private static final long serialVersionUID = 1L;

      public Object readResolve() {
         return OverviewTopComponent.getDefault();
      }
   }
}