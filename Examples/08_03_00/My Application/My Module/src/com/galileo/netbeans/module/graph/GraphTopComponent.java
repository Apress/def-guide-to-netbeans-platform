package com.galileo.netbeans.module.graph;

import java.io.Serializable;
import java.util.logging.Logger;
import org.netbeans.api.visual.graph.layout.GridGraphLayout;
import org.netbeans.api.visual.layout.LayoutFactory;
import org.netbeans.api.visual.layout.SceneLayout;
import org.openide.util.NbBundle;
import org.openide.util.lookup.Lookups;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;

final class GraphTopComponent extends TopComponent {
   
   private static GraphTopComponent instance;
   
   private static final String PREFERRED_ID = "GraphTopComponent";
   
   private SceneLayout sceneLayout = null;
   
   private GraphTopComponent() {
      initComponents();
      setName(NbBundle.getMessage(GraphTopComponent.class, "CTL_GraphTopComponent"));
      setToolTipText(NbBundle.getMessage(GraphTopComponent.class, "HINT_GraphTopComponent"));
      
      MyGraphPinScene scene = new MyGraphPinScene();
      scenePane.setViewportView(scene.createView());
      scene.addNode("Node 1");
      scene.addNode("Node 2");
      scene.addNode("Node 3");
      
      scene.addPin("Node 1", "p1");
      scene.addPin("Node 2", "p2");
      scene.addPin("Node 2", "p3");
      scene.addPin("Node 3", "p4");
      
      scene.addEdge("Edge 1");
      scene.addEdge("Edge 2");
      scene.setEdgeSource("Edge 1", "p1");
      scene.setEdgeTarget("Edge 1", "p2");
      scene.setEdgeSource("Edge 2", "p3");
      scene.setEdgeTarget("Edge 2", "p4");
      
      GridGraphLayout<String, String> layout = new GridGraphLayout<String, String>();
      sceneLayout = LayoutFactory.createSceneGraphLayout(scene, layout);
      sceneLayout.invokeLayout();
      
      associateLookup(Lookups.singleton(scene.createSatelliteView()));
   }
   
   /** This method is called from within the constructor to
    * initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is
    * always regenerated by the Form Editor.
    */
   // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
   private void initComponents() {

      scenePane = new javax.swing.JScrollPane();
      doLayout = new javax.swing.JButton();

      org.openide.awt.Mnemonics.setLocalizedText(doLayout, "Layout");
      doLayout.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            doLayoutActionPerformed(evt);
         }
      });

      org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
      this.setLayout(layout);
      layout.setHorizontalGroup(
         layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
         .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
            .addContainerGap()
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
               .add(scenePane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
               .add(doLayout))
            .addContainerGap())
      );
      layout.setVerticalGroup(
         layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
         .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
            .addContainerGap()
            .add(scenePane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 257, Short.MAX_VALUE)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
            .add(doLayout)
            .addContainerGap())
      );
   }// </editor-fold>//GEN-END:initComponents
   
private void doLayoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doLayoutActionPerformed
   sceneLayout.invokeLayoutImmediately();
}//GEN-LAST:event_doLayoutActionPerformed


   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JButton doLayout;
   private javax.swing.JScrollPane scenePane;
   // End of variables declaration//GEN-END:variables
   
   /**
    * Gets default instance. Do not use directly: reserved for *.settings files only,
    * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
    * To obtain the singleton instance, use {@link findInstance}.
    */
   public static synchronized GraphTopComponent getDefault() {
      if (instance == null) {
         instance = new GraphTopComponent();
      }
      return instance;
   }
   
   /**
    * Obtain the GraphTopComponent instance. Never call {@link #getDefault} directly!
    */
   public static synchronized GraphTopComponent findInstance() {
      TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
      if (win == null) {
         Logger.getLogger(GraphTopComponent.class.getName()).warning(
                 "Cannot find " + PREFERRED_ID + " component. It will not be located properly in the window system.");
         return getDefault();
      }
      if (win instanceof GraphTopComponent) {
         return (GraphTopComponent)win;
      }
      Logger.getLogger(GraphTopComponent.class.getName()).warning(
              "There seem to be multiple components with the '" + PREFERRED_ID +
              "' ID. That is a potential source of errors and unexpected behavior.");
      return getDefault();
   }
   
   @Override
   public int getPersistenceType() {
      return TopComponent.PERSISTENCE_ALWAYS;
   }
   
   /** replaces this in object stream */
   @Override
   public Object writeReplace() {
      return new ResolvableHelper();
   }
   
   @Override
   protected String preferredID() {
      return PREFERRED_ID;
   }
   
   final static class ResolvableHelper implements Serializable {
      private static final long serialVersionUID = 1L;
      public Object readResolve() {
         return GraphTopComponent.getDefault();
      }
   }
}
