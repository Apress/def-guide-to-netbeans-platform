package com.galileo.netbeans.module;

import java.awt.event.ActionEvent;
import java.io.Serializable;
import java.util.logging.Logger;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.TransferHandler;
import javax.swing.table.DefaultTableModel;
import org.netbeans.spi.palette.PaletteActions;
import org.netbeans.spi.palette.PaletteController;
import org.netbeans.spi.palette.PaletteFactory;
import org.openide.nodes.AbstractNode;
import org.openide.nodes.Node;
import org.openide.util.Lookup;
import org.openide.util.NbBundle;
import org.openide.util.lookup.Lookups;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;

final class PlaylistTopComponent extends TopComponent {
   
   private static PlaylistTopComponent instance;
   private static final String PREFERRED_ID = "PlaylistTopComponent";
   
   private TransferHandler th = new AlbumTransferHandler();
   
   private PlaylistTopComponent() {
      initComponents();
      setName(NbBundle.getMessage(PlaylistTopComponent.class, "CTL_PlaylistTopComponent"));
      setToolTipText(NbBundle.getMessage(PlaylistTopComponent.class, "HINT_PlaylistTopComponent"));

      albums.setTransferHandler(th);
      scrollPane.setTransferHandler(th);

      Node              r = new AbstractNode(new GenreNodeContainer());
      PaletteActions    a = new MyPaletteActions();
      PaletteController p = PaletteFactory.createPalette(r, a);

      associateLookup(Lookups.fixed(p));
   }
   
   private final class AlbumTransferHandler extends TransferHandler {
      @Override
      public boolean canImport(TransferSupport support) {
         return support.isDataFlavorSupported(Album.DATA_FLAVOR);
      }

      @Override
      public boolean importData(TransferSupport support) {
         try {
            Album a = (Album)support.getTransferable().getTransferData(Album.DATA_FLAVOR);
            DefaultTableModel model = (DefaultTableModel)albums.getModel();
            model.addRow(new Object[]{a.getTitle(), a.getTracks(), a.getCDs(), a.getYear()});
            return true;
         } catch(Exception e) {
            e.printStackTrace();
            return false;
         }
      }
   }
    
   private static final class MyPaletteActions  extends PaletteActions {
      
      public Action[] getImportActions() {
         return new Action[]{};
      }
      
      public Action[] getCustomPaletteActions() {
         return new Action[]{};
      }
      
      public Action[] getCustomCategoryActions(Lookup arg0) {
         return new Action[]{};
      }
      
      public Action[] getCustomItemActions(Lookup arg0) {
         return new Action[]{};
      }
      
      public Action getPreferredAction(Lookup arg0) {
         return new AbstractAction() {
            public void actionPerformed(ActionEvent arg0) {
               throw new UnsupportedOperationException("Not supported yet.");
            }
         };
      }
   }
   
   /** This method is called from within the constructor to
    * initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is
    * always regenerated by the Form Editor.
    */
   // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
   private void initComponents() {

      scrollPane = new javax.swing.JScrollPane();
      albums = new javax.swing.JTable();

      albums.setAutoCreateRowSorter(true);
      albums.setModel(new javax.swing.table.DefaultTableModel(
         new Object [][] {

         },
         new String [] {
            "Title", "Tracks", "CDs", "Year"
         }
      ) {
         Class[] types = new Class [] {
            java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
         };

         public Class getColumnClass(int columnIndex) {
            return types [columnIndex];
         }
      });
      scrollPane.setViewportView(albums);

      org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
      this.setLayout(layout);
      layout.setHorizontalGroup(
         layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
         .add(layout.createSequentialGroup()
            .addContainerGap()
            .add(scrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 375, Short.MAX_VALUE)
            .addContainerGap())
      );
      layout.setVerticalGroup(
         layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
         .add(layout.createSequentialGroup()
            .addContainerGap()
            .add(scrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 273, Short.MAX_VALUE)
            .addContainerGap())
      );
   }// </editor-fold>//GEN-END:initComponents
    
    
   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JTable albums;
   private javax.swing.JScrollPane scrollPane;
   // End of variables declaration//GEN-END:variables
    
    /**
     * Gets default instance. Do not use directly: reserved for *.settings files only,
     * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
     * To obtain the singleton instance, use {@link findInstance}.
     */
    public static synchronized PlaylistTopComponent getDefault() {
       if (instance == null) {
          instance = new PlaylistTopComponent();
       }
       return instance;
    }
    
    /**
     * Obtain the PlaylistTopComponent instance. Never call {@link #getDefault} directly!
     */
    public static synchronized PlaylistTopComponent findInstance() {
       TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
       if (win == null) {
          Logger.getLogger(PlaylistTopComponent.class.getName()).warning(
             "Cannot find MyWindow component. It will not be located properly in the window system.");
          return getDefault();
       }
       if (win instanceof PlaylistTopComponent) {
          return (PlaylistTopComponent)win;
       }
       Logger.getLogger(PlaylistTopComponent.class.getName()).warning(
               "There seem to be multiple components with the '" + PREFERRED_ID +
               "' ID. That is a potential source of errors and unexpected behavior.");
       return getDefault();
    }
    
    @Override
    public int getPersistenceType() {
       return TopComponent.PERSISTENCE_ALWAYS;
    }

    @Override
    public Object writeReplace() {
       return new ResolvableHelper();
    }
    
    @Override
    protected String preferredID() {
       return PREFERRED_ID;
    }
    
    final static class ResolvableHelper implements Serializable {
       private static final long serialVersionUID = 1L;
       public Object readResolve() {
          return PlaylistTopComponent.getDefault();
       }
    }
}
