package com.galileo.netbeans.module;

import java.io.Serializable;
import java.util.logging.Logger;
import org.openide.actions.CopyAction;
import org.openide.actions.CutAction;
import org.openide.actions.DeleteAction;
import org.openide.actions.PasteAction;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.explorer.view.BeanTreeView;
import org.openide.filesystems.FileObject;
import org.openide.filesystems.Repository;
import org.openide.util.ImageUtilities;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;

final class ExplorerTopComponent extends TopComponent implements ExplorerManager.Provider {
   
   private static ExplorerTopComponent instance;
   static final String ICON_PATH = "com/galileo/netbeans/module/explorer.png";
   private static final String PREFERRED_ID = "ExplorerTopComponent";
   private static final String ROOT_NODE    = "Explorer";
   
   private final ExplorerManager manager = new ExplorerManager();

   private ExplorerTopComponent() {
      initComponents();
      initActions();
      initTree();
      associateLookup(ExplorerUtils.createLookup(manager, getActionMap()));

      setName(NbBundle.getMessage(ExplorerTopComponent.class, "CTL_ExplorerTopComponent"));
      setToolTipText(NbBundle.getMessage(ExplorerTopComponent.class, "HINT_ExplorerTopComponent"));
      setIcon(ImageUtilities.loadImage(ICON_PATH, true));
   }
   
   private void initActions() {
      getActionMap().put(CutAction.get(CutAction.class).getActionMapKey(), 
              ExplorerUtils.actionCut(manager));
      getActionMap().put(CopyAction.get(CopyAction.class).getActionMapKey(), 
              ExplorerUtils.actionCopy(manager));
      getActionMap().put(PasteAction.get(PasteAction.class).getActionMapKey(), 
              ExplorerUtils.actionPaste(manager));
      getActionMap().put(DeleteAction.get(DeleteAction.class).getActionMapKey(), 
              ExplorerUtils.actionDelete(manager, true));
   }

   private void initTree() {
      FileObject folder = Repository.getDefault().getDefaultFileSystem().findResource(ROOT_NODE);
      if(folder != null) { /* folder found */
         manager.setRootContext(new ExplorerFolderNode(folder));
      }
   }

   @Override
    protected void componentActivated() {
        ExplorerUtils.activateActions(manager, true);
    }
   @Override
    protected void componentDeactivated() {
        ExplorerUtils.activateActions(manager, false);
    }

   
   /** This method is called from within the constructor to
    * initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is
    * always regenerated by the Form Editor.
    */
   // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
   private void initComponents() {

      jScrollPane1 = new BeanTreeView();

      setLayout(new java.awt.BorderLayout());
      add(jScrollPane1, java.awt.BorderLayout.CENTER);
   }// </editor-fold>//GEN-END:initComponents

   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JScrollPane jScrollPane1;
   // End of variables declaration//GEN-END:variables
    
    /**
     * Gets default instance. Do not use directly: reserved for *.settings files only,
     * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
     * To obtain the singleton instance, use {@link findInstance}.
     */
    public static synchronized ExplorerTopComponent getDefault() {
       if (instance == null) {
          instance = new ExplorerTopComponent();
       }
       return instance;
    }
    
    /**
     * Obtain the ExplorerTopComponent instance. Never call {@link #getDefault} directly!
     */
    public static synchronized ExplorerTopComponent findInstance() {
       TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
       if (win == null) {
          Logger.getLogger(ExplorerTopComponent.class.getName()).warning(
                  "Cannot find MyWindow component. It will not be located properly in the window system.");
          return getDefault();
       }
       if (win instanceof ExplorerTopComponent) {
          return (ExplorerTopComponent)win;
       }
       Logger.getLogger(ExplorerTopComponent.class.getName()).warning(
               "There seem to be multiple components with the '" + PREFERRED_ID +
               "' ID. That is a potential source of errors and unexpected behavior.");
       return getDefault();
    }
    
   @Override
    public int getPersistenceType() {
       return TopComponent.PERSISTENCE_ALWAYS;
    }
    
    /** replaces this in object stream */
   @Override
    public Object writeReplace() {
       return new ResolvableHelper();
    }
    
   @Override
    protected String preferredID() {
       return PREFERRED_ID;
    }
    
    final static class ResolvableHelper implements Serializable {
       private static final long serialVersionUID = 1L;
       public Object readResolve() {
          return ExplorerTopComponent.getDefault();
       }
    }
    
    public ExplorerManager getExplorerManager() {
        return manager;
    }
}
