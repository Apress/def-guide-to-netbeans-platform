package com.galileo.netbeans.module;

import javax.swing.Action;
import javax.swing.JComponent;
import javax.swing.JPanel;
import javax.swing.JToolBar;
import org.netbeans.core.spi.multiview.CloseOperationState;
import org.netbeans.core.spi.multiview.MultiViewElement;
import org.netbeans.core.spi.multiview.MultiViewElementCallback;
import org.openide.awt.UndoRedo;
import org.openide.util.Lookup;
import org.openide.util.lookup.Lookups;

public class MultiViewPanel2 extends JPanel implements MultiViewElement {

   private JToolBar toolbar = new JToolBar();
   private MultiViewElementCallback callback = null;
   
   public MultiViewPanel2() {
      initComponents();
   }

   /** This method is called from within the constructor to
    * initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is
    * always regenerated by the Form Editor.
    */
   // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
   private void initComponents() {

      javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
      this.setLayout(layout);
      layout.setHorizontalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGap(0, 400, Short.MAX_VALUE)
      );
      layout.setVerticalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGap(0, 300, Short.MAX_VALUE)
      );
   }// </editor-fold>//GEN-END:initComponents
   
   public JComponent getVisualRepresentation() {
      return this;
   }
   
   public JComponent getToolbarRepresentation() {
      return toolbar;
   }
   
   public Action[] getActions() {
      if(callback != null) {
         return callback.createDefaultActions();
      } else {
         return new Action[]{};
      }
   }
   
   public Lookup getLookup() {
      return Lookups.singleton(this);
   }
   
   public void componentOpened() {
      componentActivated();
   }
   
   public void componentClosed() {
   }
   
   public void componentShowing() {
   }
   
   public void componentHidden() {
   }
   
   public void componentActivated() {
      callback.updateTitle("View 2");
   }
   
   public void componentDeactivated() {
   }
   
   public UndoRedo getUndoRedo() {
      return UndoRedo.NONE;
   }
   
   public void setMultiViewCallback(MultiViewElementCallback callback) {
      this.callback = callback;
   }
   
   public CloseOperationState canCloseElement() {
      return CloseOperationState.STATE_OK;
   }
   // Variables declaration - do not modify//GEN-BEGIN:variables
   // End of variables declaration//GEN-END:variables
}
