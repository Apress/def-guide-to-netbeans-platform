package com.galileo.netbeans.mp3searcher;

import com.galileo.netbeans.mp3object.Mp3FileObject;
import java.io.Serializable;
import java.util.Collections;
import java.util.Vector;
import java.util.logging.Logger;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.AbstractTableModel;
import org.netbeans.spi.navigator.NavigatorLookupHint;
import org.openide.util.ImageUtilities;
import org.openide.util.NbBundle;
import org.openide.util.lookup.AbstractLookup;
import org.openide.util.lookup.InstanceContent;
import org.openide.util.lookup.Lookups;
import org.openide.util.lookup.ProxyLookup;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;

final class Mp3SearchList extends TopComponent implements ListSelectionListener {
   
   private static Mp3SearchList instance;

   private static final String PREFERRED_ID = "Mp3SearchList";
   public  static final String ICON_PATH    = "com/galileo/netbeans/mp3searcher/search.png";
   
   private Mp3SearchListModel model = new Mp3SearchListModel();
   
   private final InstanceContent content = new InstanceContent();
   
   private Mp3SearchList() {
      initComponents();
      setName(NbBundle.getMessage(Mp3SearchList.class, "CTL_Mp3SearchList"));
      setToolTipText(NbBundle.getMessage(Mp3SearchList.class, "HINT_Mp3SearchList"));
      setIcon(ImageUtilities.loadImage(ICON_PATH, true));

      searchResults.setModel(model);
      searchResults.getSelectionModel().addListSelectionListener(this);
      
      associateLookup(new ProxyLookup(new AbstractLookup(content), Lookups.singleton(new Mp3AlbumNavigatorLookupHint())));
   }
   
   private static final class Mp3SearchListModel extends AbstractTableModel {
      private String[] columns = {"Artist", "Title", "Year"};
      private Vector<Mp3FileObject> data = new Vector<Mp3FileObject>();
      
      public Mp3SearchListModel() {
         data.add(new Mp3FileObject("Gigi D'Agostino", "The rain", "2006"));
         data.add(new Mp3FileObject("Marquess", "El temperamento", "2006"));
         data.add(new Mp3FileObject("Floorfilla", "Cyberdream", "2006"));
      }
      
      public Mp3FileObject getRow(int row) {
         return data.get(row);
      }
      
      public int getRowCount() {
         return data.size();
      }
      
      public int getColumnCount() {
         return columns.length;
      }
      
      @Override
      public String getColumnName(int col) {
         return columns[col];
      }
      
      public Object getValueAt(int row, int col) {
         Mp3FileObject mp3 = data.get(row);

         switch(col) {
            case 0: return mp3.getArtist();
            case 1: return mp3.getTitle();
            case 2: return mp3.getYear();
         }
         return "";
      }
   }

   private static final class Mp3AlbumNavigatorLookupHint implements NavigatorLookupHint {

      public String getContentType() {
         return "audio/mpeg";
      }
   }
   
   /** This method is called from within the constructor to
    * initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is
    * always regenerated by the Form Editor.
    */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jScrollPane = new javax.swing.JScrollPane();
        searchResults = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, "Search:");

        org.openide.awt.Mnemonics.setLocalizedText(jButton1, "Search");

        searchResults.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane.setViewportView(searchResults);

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, "Search results:");

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jSeparator1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 333, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jLabel2)
                    .add(layout.createSequentialGroup()
                        .add(jLabel1)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jTextField1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 216, Short.MAX_VALUE)
                        .add(11, 11, 11)
                        .add(jButton1))
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 333, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1)
                    .add(jTextField1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jButton1))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jSeparator1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 10, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel2)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 229, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTable searchResults;
    // End of variables declaration//GEN-END:variables
    
    /**
     * Gets default instance. Do not use directly: reserved for *.settings files only,
     * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
     * To obtain the singleton instance, use {@link findInstance}.
     */
    public static synchronized Mp3SearchList getDefault() {
       if (instance == null) {
          instance = new Mp3SearchList();
       }
       return instance;
    }
    
    /**
     * Obtain the Mp3SearchListTopComponent instance. Never call {@link #getDefault} directly!
     */
    public static synchronized Mp3SearchList findInstance() {
       TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
       if (win == null) {
          Logger.getLogger(Mp3SearchList.class.getName()).warning(
             "Cannot find MyWindow component. It will not be located properly in the window system.");
          return getDefault();
       }
       if (win instanceof Mp3SearchList) {
          return (Mp3SearchList)win;
       }
       Logger.getLogger(Mp3SearchList.class.getName()).warning(
               "There seem to be multiple components with the '" + PREFERRED_ID +
               "' ID. That is a potential source of errors and unexpected behavior.");
       return getDefault();
    }
    
   @Override
    public int getPersistenceType() {
       return TopComponent.PERSISTENCE_ALWAYS;
    }
  
    /** replaces this in object stream */
   @Override
    public Object writeReplace() {
       return new ResolvableHelper();
    }
    
   @Override
    protected String preferredID() {
       return PREFERRED_ID;
    }
    
    final static class ResolvableHelper implements Serializable {
       private static final long serialVersionUID = 1L;
       public Object readResolve() {
          return Mp3SearchList.getDefault();
       }
    }
    
    public void valueChanged(ListSelectionEvent event) {
       if(!event.getValueIsAdjusting()) {
          Mp3FileObject mp3 = model.getRow(searchResults.getSelectedRow());
          content.set(Collections.singleton(mp3), null);
       }
    }
}
