package com.galileo.netbeans.module;

import com.amazon.webservices.awsecommerceservice._2009_02_01.AWSECommerceService;
import com.amazon.webservices.awsecommerceservice._2009_02_01.AWSECommerceServicePortType;
import com.amazon.webservices.awsecommerceservice._2009_02_01.ImageSet;
import com.amazon.webservices.awsecommerceservice._2009_02_01.Item;
import com.amazon.webservices.awsecommerceservice._2009_02_01.ItemLookup;
import com.amazon.webservices.awsecommerceservice._2009_02_01.ItemLookupRequest;
import com.amazon.webservices.awsecommerceservice._2009_02_01.ItemLookupResponse;
import java.awt.FlowLayout;
import java.io.Serializable;
import java.net.URL;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.SwingWorker;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;

final class ECSTopComponent extends TopComponent {

   private static ECSTopComponent instance;

   private static final String PREFERRED_ID = "ECSTopComponent";
   private static final String AWS_KEY = "1FE60E2PTDEN6TA8R6G2";

   private ECSTopComponent() {
      initComponents();
      setName(NbBundle.getMessage(ECSTopComponent.class, "CTL_ECSTopComponent"));
      setToolTipText(NbBundle.getMessage(ECSTopComponent.class, "HINT_ECSTopComponent"));
   }

   private final class ImageLookupByASIN 
           extends SwingWorker<String, Object> {

      private String asin = new String();

      public ImageLookupByASIN(String asin) {
         this.asin = asin;
      }

      @Override
      public String doInBackground() {
         String url = new String();

         try {
            AWSECommerceService service = new AWSECommerceService();
            AWSECommerceServicePortType port = service.getAWSECommerceServicePort();

            ItemLookupRequest request = new ItemLookupRequest();
            request.setIdType("ASIN");
            request.getItemId().add(asin);
            request.getResponseGroup().add("Images");

            ItemLookup il = new ItemLookup();
            il.setAWSAccessKeyId(AWS_KEY);
            il.getRequest().add(request);

            ItemLookupResponse response = port.itemLookup(il);

            if(response.getItems().get(0).getItem().size() > 0) {
               Item i = response.getItems().get(0).getItem().get(0);
               if(i.getImageSets().get(0).getImageSet().size() > 0) {
                  ImageSet is = i.getImageSets().get(0).getImageSet().get(0);
                  url = is.getThumbnailImage().getURL();
               } else {
                  System.out.println("no image set found for product: " + asin);
               }
            } else {
               System.out.println("no product found for ASIN: " + asin);
            }
         } catch (Exception e) {
            // TODO handle custom exceptions here
            e.printStackTrace();
         }
         return url;
      }

      @Override
      protected void done() {
         try {
            cover.add(new JLabel(new ImageIcon(new URL(get()))), FlowLayout.LEFT);
            cover.updateUI();
         } catch (Exception e) {
            e.printStackTrace();
         }
      }
   }
   
   /** This method is called from within the constructor to
    * initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is
    * always regenerated by the Form Editor.
    */
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents() {

      search = new javax.swing.JButton();
      asin = new javax.swing.JTextField();
      jLabel1 = new javax.swing.JLabel();
      jSeparator1 = new javax.swing.JSeparator();
      cover = new javax.swing.JPanel();

      org.openide.awt.Mnemonics.setLocalizedText(search, "Search");
      search.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            searchActionPerformed(evt);
         }
      });

      org.openide.awt.Mnemonics.setLocalizedText(jLabel1, "ASIN:");

      cover.setBorder(javax.swing.BorderFactory.createTitledBorder("Cover"));

      org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
      this.setLayout(layout);
      layout.setHorizontalGroup(
         layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
         .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
            .addContainerGap()
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
               .add(org.jdesktop.layout.GroupLayout.LEADING, cover, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 388, Short.MAX_VALUE)
               .add(org.jdesktop.layout.GroupLayout.LEADING, jSeparator1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 388, Short.MAX_VALUE)
               .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                  .add(jLabel1)
                  .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                  .add(asin, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 285, Short.MAX_VALUE)
                  .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                  .add(search)))
            .addContainerGap())
      );
      layout.setVerticalGroup(
         layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
         .add(layout.createSequentialGroup()
            .addContainerGap()
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
               .add(jLabel1)
               .add(search)
               .add(asin, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(jSeparator1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 10, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(cover, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 233, Short.MAX_VALUE)
            .addContainerGap())
      );
   }// </editor-fold>//GEN-END:initComponents

   private void searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchActionPerformed
      new ImageLookupByASIN(asin.getText()).execute();
}//GEN-LAST:event_searchActionPerformed
   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JTextField asin;
   private javax.swing.JPanel cover;
   private javax.swing.JLabel jLabel1;
   private javax.swing.JSeparator jSeparator1;
   private javax.swing.JButton search;
   // End of variables declaration//GEN-END:variables

   /**
    * Gets default instance. Do not use directly: reserved for *.settings files only,
    * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
    * To obtain the singleton instance, use {@link findInstance}.
    */
   public static synchronized ECSTopComponent getDefault() {
      if (instance == null) {
         instance = new ECSTopComponent();
      }
      return instance;
   }

   /**
    * Obtain the ECSTopComponent instance. Never call {@link #getDefault} directly!
    */
   public static synchronized ECSTopComponent findInstance() {
      TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
      if (win == null) {
         Logger.getLogger(ECSTopComponent.class.getName()).warning("Cannot find " + PREFERRED_ID + " component. It will not be located properly in the window system.");
         return getDefault();
      }
      if (win instanceof ECSTopComponent) {
         return (ECSTopComponent) win;
      }
      Logger.getLogger(ECSTopComponent.class.getName()).warning("There seem to be multiple components with the '" + PREFERRED_ID + "' ID. That is a potential source of errors and unexpected behavior.");
      return getDefault();
   }

    @Override
   public int getPersistenceType() {
      return TopComponent.PERSISTENCE_ALWAYS;
   }

   /** replaces this in object stream */
    @Override
   public Object writeReplace() {
      return new ResolvableHelper();
   }

    @Override
   protected String preferredID() {
      return PREFERRED_ID;
   }

   static final class ResolvableHelper implements Serializable {

      private static final long serialVersionUID = 1L;

      public Object readResolve() {
         return ECSTopComponent.getDefault();
      }
   }
}
