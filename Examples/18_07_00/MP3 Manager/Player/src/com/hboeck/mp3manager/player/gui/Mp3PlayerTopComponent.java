package com.hboeck.mp3manager.player.gui;

import com.hboeck.mp3manager.filetype.Mp3DataObject;
import com.hboeck.mp3manager.id3.v1.ID3v1Tag;
import com.hboeck.mp3manager.services.player.Mp3Player;
import com.hboeck.mp3manager.services.player.Mp3PlayerEventListener;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.Serializable;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.Timer;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.openide.nodes.Node;
import org.openide.util.ImageUtilities;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;

/**
 * Top component which displays something.
 */
final class Mp3PlayerTopComponent extends TopComponent implements Mp3PlayerEventListener {

   private static Mp3PlayerTopComponent instance;

   private static final String PREFERRED_ID = "Mp3PlayerTopComponent";
   private static final SimpleDateFormat SDF = new SimpleDateFormat("mm:ss");

   private Timer t = null;
   private Mp3Player player = null;

   private Mp3PlayerTopComponent() {
      initComponents();
      setName(NbBundle.getMessage(Mp3PlayerTopComponent.class, "CTL_Mp3PlayerTopComponent"));
      setToolTipText(NbBundle.getMessage(Mp3PlayerTopComponent.class, "HINT_Mp3PlayerTopComponent"));
      setIcon(ImageUtilities.loadImage(NbBundle.getMessage(Mp3PlayerTopComponent.class, "CTL_Mp3PlayerIcon"), true));
      player = Mp3Player.getDefault();
      player.addEventListener(this);
      //volume.setValue(player.getVolume());
   }

   /** This method is called from within the constructor to
    * initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is
    * always regenerated by the Form Editor.
    */
   // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
   private void initComponents() {

      controlPanel = new javax.swing.JPanel();
      time = new javax.swing.JLabel();
      title = new javax.swing.JLabel();
      duration = new javax.swing.JSlider();
      jSeparator1 = new javax.swing.JSeparator();
      previous = new javax.swing.JButton();
      volume = new javax.swing.JSlider();
      play = new javax.swing.JButton();
      pause = new javax.swing.JButton();
      stop = new javax.swing.JButton();
      next = new javax.swing.JButton();
      open = new javax.swing.JButton();
      mute = new javax.swing.JToggleButton();

      controlPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

      time.setFont(new java.awt.Font("Arial", 0, 18));
      org.openide.awt.Mnemonics.setLocalizedText(time, "00:00");

      title.setFont(new java.awt.Font("Arial", 0, 14));
      org.openide.awt.Mnemonics.setLocalizedText(title, "Title");

      duration.setValue(0);
      duration.addMouseListener(new java.awt.event.MouseAdapter() {
         public void mouseReleased(java.awt.event.MouseEvent evt) {
            durationMouseReleased(evt);
         }
      });
      duration.addChangeListener(new javax.swing.event.ChangeListener() {
         public void stateChanged(javax.swing.event.ChangeEvent evt) {
            durationStateChanged(evt);
         }
      });

      jSeparator1.setPreferredSize(new java.awt.Dimension(0, 1));

      previous.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hboeck/mp3manager/player/gui/icons/previous.png"))); // NOI18N
      previous.setToolTipText("Previous");
      previous.setMargin(new java.awt.Insets(2, 5, 2, 5));
      previous.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            previousActionPerformed(evt);
         }
      });

      volume.setOrientation(javax.swing.JSlider.VERTICAL);
      volume.setValue(20);
      volume.addChangeListener(new javax.swing.event.ChangeListener() {
         public void stateChanged(javax.swing.event.ChangeEvent evt) {
            volumeStateChanged(evt);
         }
      });

      play.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hboeck/mp3manager/player/gui/icons/play.png"))); // NOI18N
      play.setToolTipText("Play");
      play.setMargin(new java.awt.Insets(2, 6, 2, 6));
      play.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            playActionPerformed(evt);
         }
      });

      pause.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hboeck/mp3manager/player/gui/icons/pause.png"))); // NOI18N
      pause.setToolTipText("Pause");
      pause.setMargin(new java.awt.Insets(2, 6, 2, 6));
      pause.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            pauseActionPerformed(evt);
         }
      });

      stop.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hboeck/mp3manager/player/gui/icons/stop.png"))); // NOI18N
      stop.setToolTipText("Stop");
      stop.setMargin(new java.awt.Insets(2, 6, 2, 6));
      stop.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            stopActionPerformed(evt);
         }
      });

      next.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hboeck/mp3manager/player/gui/icons/next.png"))); // NOI18N
      next.setToolTipText("Next");
      next.setMargin(new java.awt.Insets(2, 5, 2, 5));
      next.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            nextActionPerformed(evt);
         }
      });

      open.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hboeck/mp3manager/player/gui/icons/open.png"))); // NOI18N
      open.setToolTipText("Open");
      open.setMargin(new java.awt.Insets(2, 6, 2, 6));
      open.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            openActionPerformed(evt);
         }
      });

      mute.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hboeck/mp3manager/player/gui/icons/mute.png"))); // NOI18N
      mute.setToolTipText("Mute");
      mute.setMargin(new java.awt.Insets(2, 5, 2, 5));
      mute.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            muteActionPerformed(evt);
         }
      });

      org.jdesktop.layout.GroupLayout controlPanelLayout = new org.jdesktop.layout.GroupLayout(controlPanel);
      controlPanel.setLayout(controlPanelLayout);
      controlPanelLayout.setHorizontalGroup(
         controlPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
         .add(controlPanelLayout.createSequentialGroup()
            .add(2, 2, 2)
            .add(controlPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
               .add(controlPanelLayout.createSequentialGroup()
                  .add(time)
                  .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                  .add(title, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 243, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
               .add(jSeparator1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
               .add(duration, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 294, Short.MAX_VALUE))
            .add(18, 18, 18)
            .add(volume, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
         .add(controlPanelLayout.createSequentialGroup()
            .add(previous)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(play)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(pause)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(stop)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(next)
            .add(18, 18, 18)
            .add(open)
            .add(18, 18, 18)
            .add(mute))
      );
      controlPanelLayout.setVerticalGroup(
         controlPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
         .add(controlPanelLayout.createSequentialGroup()
            .add(controlPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
               .add(controlPanelLayout.createSequentialGroup()
                  .add(controlPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                     .add(time)
                     .add(title))
                  .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                  .add(jSeparator1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                  .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                  .add(duration, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
               .add(volume, 0, 0, Short.MAX_VALUE))
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(controlPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
               .add(controlPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                  .add(previous)
                  .add(play)
                  .add(pause)
                  .add(stop)
                  .add(next))
               .add(open)
               .add(mute))
            .addContainerGap())
      );

      org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
      this.setLayout(layout);
      layout.setHorizontalGroup(
         layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
         .add(layout.createSequentialGroup()
            .addContainerGap()
            .add(controlPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .addContainerGap(19, Short.MAX_VALUE))
      );
      layout.setVerticalGroup(
         layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
         .add(layout.createSequentialGroup()
            .addContainerGap()
            .add(controlPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 124, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .addContainerGap(19, Short.MAX_VALUE))
      );
   }// </editor-fold>//GEN-END:initComponents

private void pauseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pauseActionPerformed
   player.pause();
}//GEN-LAST:event_pauseActionPerformed

private void durationStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_durationStateChanged
//   if(duration.getValueIsAdjusting()) {
//      title.setText(sdf.format(new Date(duration.getValue()*1000)));
//   } else {
//      title.setText("Title");
//   }
}//GEN-LAST:event_durationStateChanged

private void muteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_muteActionPerformed
   player.setMute(mute.isSelected());
}//GEN-LAST:event_muteActionPerformed

private void durationMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_durationMouseReleased
   player.setMediaTime(duration.getValue());
}//GEN-LAST:event_durationMouseReleased

private void stopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopActionPerformed
   player.stop();
}//GEN-LAST:event_stopActionPerformed

private void playActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playActionPerformed
   Node n[] = getRegistry().getActivatedNodes();
   if(n != null) {
      Mp3DataObject mp3 = n[0].getLookup().lookup(Mp3DataObject.class);
      if(mp3 != null) {
         player.play(mp3);
      }
   }
}//GEN-LAST:event_playActionPerformed

private void volumeStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_volumeStateChanged
   player.setVolume(volume.getValue());
}//GEN-LAST:event_volumeStateChanged

   private void openActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openActionPerformed
   JFileChooser chooser = new JFileChooser("D:/");
   chooser.setFileFilter(new FileNameExtensionFilter("MP3 Files", "mp3"));
   if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
      try {
         player.play(Mp3DataObject.find(chooser.getSelectedFile()));
      } catch(Exception e) {
         e.printStackTrace();
      }
   }
}//GEN-LAST:event_openActionPerformed

   private void nextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextActionPerformed
       player.next();
   }//GEN-LAST:event_nextActionPerformed

   private void previousActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_previousActionPerformed
       player.previous();
   }//GEN-LAST:event_previousActionPerformed
    
    
   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JPanel controlPanel;
   private javax.swing.JSlider duration;
   private javax.swing.JSeparator jSeparator1;
   private javax.swing.JToggleButton mute;
   private javax.swing.JButton next;
   private javax.swing.JButton open;
   private javax.swing.JButton pause;
   private javax.swing.JButton play;
   private javax.swing.JButton previous;
   private javax.swing.JButton stop;
   private javax.swing.JLabel time;
   private javax.swing.JLabel title;
   private javax.swing.JSlider volume;
   // End of variables declaration//GEN-END:variables
    
    /**
     * Gets default instance. Do not use directly: reserved for *.settings files only,
     * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
     * To obtain the singleton instance, use {@link findInstance}.
     */
    public static synchronized Mp3PlayerTopComponent getDefault() {
       if (instance == null) {
          instance = new Mp3PlayerTopComponent();
       }
       return instance;
    }
    
    /**
     * Obtain the Mp3PlayerTopComponent instance. Never call {@link #getDefault} directly!
     */
    public static synchronized Mp3PlayerTopComponent findInstance() {
       TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
       if (win == null) {
          Logger.getLogger(Mp3PlayerTopComponent.class.getName()).warning(
                  "Cannot find " + PREFERRED_ID + " component. It will not be located properly in the window system.");
          return getDefault();
       }
       if (win instanceof Mp3PlayerTopComponent) {
          return (Mp3PlayerTopComponent)win;
       }
       Logger.getLogger(Mp3PlayerTopComponent.class.getName()).warning(
               "There seem to be multiple components with the '" + PREFERRED_ID +
               "' ID. That is a potential source of errors and unexpected behavior.");
       return getDefault();
    }
    
    @Override
    public int getPersistenceType() {
       return TopComponent.PERSISTENCE_ALWAYS;
    }
    
    /** replaces this in object stream */
    @Override
    public Object writeReplace() {
       return new ResolvableHelper();
    }
    
    @Override
    protected String preferredID() {
       return PREFERRED_ID;
    }
    
    final static class ResolvableHelper implements Serializable {
       private static final long serialVersionUID = 1L;
       public Object readResolve() {
          return Mp3PlayerTopComponent.getDefault();
       }
    }

    public void playing(Mp3DataObject mp3) {
      resetInfos();
      //setActivatedNodes(new Node[]{mp3.getNodeDelegate()});
      title.setText(mp3.getName());
      duration.setMaximum(player.getDuration());

      ID3v1Tag id3v1 = mp3.getID3v1Tag();
      title.setText(id3v1.getArtist() + " - " + id3v1.getTitle());

      ActionListener updateInfo = new ActionListener() {

         public void actionPerformed(ActionEvent evt) {
            duration.setValue(player.getMediaTime());
            time.setText(SDF.format(new Date(player.getMediaTime() * 1000)));
         }
      };
      if (t != null) {
         t.stop();
      }
      t = new Timer(1000, updateInfo);
      t.start();
   }

   public void stopped() {
      resetInfos();
      if(t != null) {
         t.stop();
      }
   }

   private void resetInfos() {
      duration.setValue(0);
      time.setText("00:00");
      title.setText("Title");
   }
}
